# Source HREF: http://eiopa.europa.eu/eu/xbrl/func/math.xml

# RDF triples (turtle syntax)

@prefix xl: <http://www.xbrl.org/2003/XLink#>.
@prefix role: <http://www.xbrl.org/2003/role/#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix variable: <http://xbrl.org/2008/variable#>.
@prefix df: <http://xbrl.org/2008/filter/dimension#>.
@prefix customfunction: <http://xbrl.org/2010/custom-function#>.
@prefix func: <http://www.eurofiling.info/xbrl/func#>.
@prefix eiopa_func: <http://eiopa.europa.eu/xbrl/func#>.
@prefix role2: <http://www.xbrl.org/2003/role#>.
@prefix arcrole6: <http://xbrl.org/arcrole/2010#>.
@prefix role6: <http://eiopa.europa.eu/xbrl/s2md/role/fws/solvency/solvency2/2021-07-15/tab/S.28.02.01.05#>.
@prefix dts2460: <http://eiopa.europa.eu/eu/xbrl/func/math.xml#>.


# XLINKS
# localname: link
# role: http://www.xbrl.org/2003/role/link
# base: http://eiopa.europa.eu/eu/xbrl/func/math.xml

dts2460:link90854 arcrole6:function-implementation [
    xl:type xl:link ;
    xl:role role2:link ;
    xl:from eiopa_func:exp ;
    xl:to eiopa_func:impl_exp ;
    ] .

eiopa_func:exp 
    xl:type variable:function ;
    xl:name """math_fn:exp"""^^rdf:XMLLiteral ;
    xl:output """item()"""^^rdf:XMLLiteral ;
    .

eiopa_func:impl_exp 
    xl:type customfunction:implementation ;
    customfunction:step """$exp_numerator div $exp_denominator"""^^rdf:XMLLiteral ;
    customfunction:output """
if ($exponent eq 0) then 1 else if ($exponent lt 0) then 1 div math_fn:exp($base, abs($exp_numerator), abs($exp_denominator)) else if ($exponent ge 1) then $base * math_fn:exp($base, $exp_numerator - $exp_denominator, $exp_denominator) else math_fn:root($base, $exp_numerator, $exp_denominator, 0, 100000000000, 15)
            """^^rdf:XMLLiteral ;
    .

dts2460:link90855 arcrole6:function-implementation [
    xl:type xl:link ;
    xl:role role2:link ;
    xl:from eiopa_func:root ;
    xl:to eiopa_func:impl_root ;
    ] .

eiopa_func:root 
    xl:type variable:function ;
    xl:name """math_fn:root"""^^rdf:XMLLiteral ;
    xl:output """item()"""^^rdf:XMLLiteral ;
    .

eiopa_func:impl_root 
    xl:type customfunction:implementation ;
    customfunction:step """
if (math_fn:exp($root_number + $root_step, $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number else if (math_fn:exp($root_number + ($root_step * 2), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + $root_step else if (math_fn:exp($root_number + ($root_step * 3), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 2) else if (math_fn:exp($root_number + ($root_step * 4), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 3) else if (math_fn:exp($root_number + ($root_step * 5), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 4) else if (math_fn:exp($root_number + ($root_step * 6), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 5) else if (math_fn:exp($root_number + ($root_step * 7), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 6) else if (math_fn:exp($root_number + ($root_step * 8), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 7) else if (math_fn:exp($root_number + ($root_step * 9), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 8) else if (math_fn:exp($root_number + ($root_step * 10), $root_denominator, 1) gt math_fn:exp($base, $root_numerator, 1)) then $root_number + ($root_step * 9) else 0
            """^^rdf:XMLLiteral ;
    customfunction:output """
if ($root_rounding eq 0) then $root_step_value else math_fn:root($base, $root_numerator, $root_denominator, $root_step_value, $root_step * 0.1, $root_rounding - 1)
            """^^rdf:XMLLiteral ;
    .

